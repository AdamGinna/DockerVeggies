# Generated by Django 2.2.7 on 2020-02-17 11:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('height', models.PositiveIntegerField(blank=True, null=True, verbose_name='height')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='weight')),
                ('age', models.PositiveIntegerField(blank=True, null=True, verbose_name='age')),
                ('activity', models.PositiveIntegerField(blank=True, null=True, verbose_name='activity')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Food_To_Substitute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_name', models.CharField(max_length=120, unique=True, verbose_name='food_name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='decription')),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True, verbose_name='name')),
                ('calories', models.PositiveIntegerField(blank=True, null=True, verbose_name='calories')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(verbose_name='description')),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True, verbose_name='name')),
                ('city', models.CharField(max_length=120, verbose_name='city')),
                ('foto', models.ImageField(blank=True, null=True, upload_to='', verbose_name='foto')),
                ('street', models.CharField(max_length=120, verbose_name='street')),
                ('street_number', models.PositiveIntegerField(verbose_name='street_number')),
                ('latX', models.DecimalField(decimal_places=10, max_digits=12, verbose_name='latX')),
                ('longY', models.DecimalField(decimal_places=10, max_digits=12, verbose_name='LongY')),
                ('hours', models.TextField(blank=True, null=True, verbose_name='hours')),
                ('rating', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='rating')),
                ('description', models.TextField(verbose_name='description')),
                ('id_moderator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Report_Res',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(verbose_name='description')),
                ('id_restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='veggies.Restaurant')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe_decryption', models.TextField(verbose_name='recipe_descyption')),
                ('recipe_foto', models.ImageField(upload_to='', verbose_name='recipe_foto')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Rating_Restaurant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='commet')),
                ('rating', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='rating')),
                ('id_restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='veggies.Restaurant')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Rating_Recipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_comment', models.TextField(blank=True, null=True, verbose_name='user_comment')),
                ('rating', models.PositiveSmallIntegerField()),
                ('id_recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='veggies.Recipe')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('like', models.IntegerField(verbose_name='like')),
                ('id_ingredients', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='veggies.Ingredient')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient_List',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='veggies.Ingredient')),
                ('id_recipes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='veggies.Recipe')),
            ],
        ),
        migrations.CreateModel(
            name='Food_Substitute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_food_to_substitute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='veggies.Food_To_Substitute')),
                ('id_vegan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='veggies.Ingredient')),
            ],
        ),
    ]
